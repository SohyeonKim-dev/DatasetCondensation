/data/happythgus/newLDA/DC
/data/opt/anaconda3/envs/pytorch1.12.1_p38/bin/python
moana-r3
main.py:95: DeprecationWarning: an integer is required (got type numpy.float64).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
main.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1659484810403/work/torch/csrc/utils/tensor_new.cpp:201.)
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
eval_it_pool:  [0, 500, 1000]
Files already downloaded and verified
Files already downloaded and verified

================== Exp 0 ==================
 
Hyper-parameters: 
 {'method': 'DC', 'dataset': 'CIFAR10', 'model': 'ConvNet', 'ipc': 10, 'eval_mode': 'S', 'num_exp': 1, 'num_eval': 20, 'epoch_eval_train': 300, 'Iteration': 1000, 'lr_img': 0.1, 'lr_net': 0.01, 'batch_real': 256, 'batch_train': 256, 'init': 'noise', 'dsa_strategy': 'None', 'data_path': 'data', 'save_path': 'result', 'dis_metric': 'ours', 'outer_loop': 10, 'inner_loop': 50, 'device': 'cuda', 'dsa_param': <utils.ParamDiffAug object at 0x7f67d3fdbcd0>, 'dsa': False}
Evaluation model pool:  ['ConvNet']
class c = 0: 5000 real images
class c = 1: 5000 real images
class c = 2: 5000 real images
class c = 3: 5000 real images
class c = 4: 5000 real images
class c = 5: 5000 real images
class c = 6: 5000 real images
class c = 7: 5000 real images
class c = 8: 5000 real images
class c = 9: 5000 real images
real images channel 0, mean = -0.0000, std = 1.2211
real images channel 1, mean = -0.0002, std = 1.2211
real images channel 2, mean = 0.0002, std = 1.3014
initialize synthetic data from random noise
[2023-10-27 23:39:33] training begins
-------------------------
Evaluation
model_train = ConvNet, model_eval = ConvNet, iteration = 0
DC augmentation parameters: 
 {'crop': 4, 'scale': 0.2, 'rotate': 45, 'noise': 0.001, 'strategy': 'none'}
[2023-10-27 23:39:40] Evaluate_00: epoch = 0300 train time = 5 s train loss = 0.003671 train acc = 1.0000, test acc = 0.1010
[2023-10-27 23:39:45] Evaluate_01: epoch = 0300 train time = 2 s train loss = 0.003707 train acc = 1.0000, test acc = 0.1020
[2023-10-27 23:39:49] Evaluate_02: epoch = 0300 train time = 2 s train loss = 0.003599 train acc = 1.0000, test acc = 0.0882
[2023-10-27 23:39:54] Evaluate_03: epoch = 0300 train time = 2 s train loss = 0.003608 train acc = 1.0000, test acc = 0.0856
[2023-10-27 23:39:58] Evaluate_04: epoch = 0300 train time = 2 s train loss = 0.003625 train acc = 1.0000, test acc = 0.1021
[2023-10-27 23:40:03] Evaluate_05: epoch = 0300 train time = 2 s train loss = 0.003703 train acc = 1.0000, test acc = 0.0869
[2023-10-27 23:40:07] Evaluate_06: epoch = 0300 train time = 2 s train loss = 0.003653 train acc = 1.0000, test acc = 0.0843
[2023-10-27 23:40:11] Evaluate_07: epoch = 0300 train time = 2 s train loss = 0.003833 train acc = 1.0000, test acc = 0.0943
[2023-10-27 23:40:16] Evaluate_08: epoch = 0300 train time = 2 s train loss = 0.003630 train acc = 1.0000, test acc = 0.0982
[2023-10-27 23:40:20] Evaluate_09: epoch = 0300 train time = 2 s train loss = 0.003704 train acc = 1.0000, test acc = 0.0941
[2023-10-27 23:40:25] Evaluate_10: epoch = 0300 train time = 2 s train loss = 0.003683 train acc = 1.0000, test acc = 0.0852
[2023-10-27 23:40:29] Evaluate_11: epoch = 0300 train time = 2 s train loss = 0.003657 train acc = 1.0000, test acc = 0.1033
[2023-10-27 23:40:34] Evaluate_12: epoch = 0300 train time = 2 s train loss = 0.003583 train acc = 1.0000, test acc = 0.0940
[2023-10-27 23:40:38] Evaluate_13: epoch = 0300 train time = 2 s train loss = 0.003621 train acc = 1.0000, test acc = 0.1185
[2023-10-27 23:40:43] Evaluate_14: epoch = 0300 train time = 2 s train loss = 0.003762 train acc = 1.0000, test acc = 0.1088
[2023-10-27 23:40:47] Evaluate_15: epoch = 0300 train time = 2 s train loss = 0.003692 train acc = 1.0000, test acc = 0.0881
[2023-10-27 23:40:52] Evaluate_16: epoch = 0300 train time = 2 s train loss = 0.003779 train acc = 1.0000, test acc = 0.1086
[2023-10-27 23:40:56] Evaluate_17: epoch = 0300 train time = 2 s train loss = 0.003665 train acc = 1.0000, test acc = 0.0854
[2023-10-27 23:41:00] Evaluate_18: epoch = 0300 train time = 2 s train loss = 0.003642 train acc = 1.0000, test acc = 0.0972
[2023-10-27 23:41:05] Evaluate_19: epoch = 0300 train time = 2 s train loss = 0.003700 train acc = 1.0000, test acc = 0.0992
Evaluate 20 random ConvNet, mean = 0.0962 std = 0.0092
-------------------------
[tensor([[-0.0063,  0.0058,  0.0108, -0.0098, -0.0199,  0.0044, -0.0345, -0.0149,
         -0.0144, -0.0077]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0024,  0.0065,  0.0091, -0.0094, -0.0295,  0.0049, -0.0392, -0.0098,
         -0.0103, -0.0078]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0079,  0.0090,  0.0072, -0.0042, -0.0229,  0.0034, -0.0281, -0.0172,
         -0.0083, -0.0056]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[ 3.8338e-04,  7.9740e-03,  7.8660e-03, -1.3668e-02, -2.6630e-02,
          1.5286e-03, -3.2279e-02, -1.3942e-02, -1.2818e-02, -1.8831e-05]],
       device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0067,  0.0092,  0.0097, -0.0127, -0.0251, -0.0012, -0.0336, -0.0138,
         -0.0080, -0.0077]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0075,  0.0107,  0.0087, -0.0074, -0.0260, -0.0030, -0.0378, -0.0161,
         -0.0082, -0.0018]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0080,  0.0063,  0.0137, -0.0080, -0.0204,  0.0021, -0.0328, -0.0130,
         -0.0114, -0.0031]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0016,  0.0042,  0.0103, -0.0045, -0.0235,  0.0036, -0.0388, -0.0200,
         -0.0100, -0.0115]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0024,  0.0041,  0.0106, -0.0076, -0.0205,  0.0024, -0.0310, -0.0167,
         -0.0123, -0.0039]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0069,  0.0028,  0.0052, -0.0092, -0.0193,  0.0061, -0.0398, -0.0176,
         -0.0107, -0.0083]], device='cuda:0', grad_fn=<AddmmBackward0>)]
10
Traceback (most recent call last):
  File "main.py", line 264, in <module>
    main()
  File "main.py", line 226, in main
    lda_loss = LDALoss(lda_X, lda_Y)
  File "/data/happythgus/newLDA/DC/utils.py", line 70, in LDALoss
    class_mean = torch.mean(torch.tensor(class_samples).to('cuda')).to('cuda').item() 
ValueError: only one element tensors can be converted to Python scalars
