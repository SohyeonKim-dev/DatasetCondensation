/data/happythgus/newLDA/DC
/data/opt/anaconda3/envs/pytorch1.12.1_p38/bin/python
moana-r3
main.py:95: DeprecationWarning: an integer is required (got type numpy.float64).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
main.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1659484810403/work/torch/csrc/utils/tensor_new.cpp:201.)
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
eval_it_pool:  [0, 500, 1000]
Files already downloaded and verified
Files already downloaded and verified

================== Exp 0 ==================
 
Hyper-parameters: 
 {'method': 'DC', 'dataset': 'CIFAR10', 'model': 'ConvNet', 'ipc': 10, 'eval_mode': 'S', 'num_exp': 1, 'num_eval': 20, 'epoch_eval_train': 300, 'Iteration': 1000, 'lr_img': 0.1, 'lr_net': 0.01, 'batch_real': 256, 'batch_train': 256, 'init': 'noise', 'dsa_strategy': 'None', 'data_path': 'data', 'save_path': 'result', 'dis_metric': 'ours', 'outer_loop': 10, 'inner_loop': 50, 'device': 'cuda', 'dsa_param': <utils.ParamDiffAug object at 0x7f27706a2cd0>, 'dsa': False}
Evaluation model pool:  ['ConvNet']
class c = 0: 5000 real images
class c = 1: 5000 real images
class c = 2: 5000 real images
class c = 3: 5000 real images
class c = 4: 5000 real images
class c = 5: 5000 real images
class c = 6: 5000 real images
class c = 7: 5000 real images
class c = 8: 5000 real images
class c = 9: 5000 real images
real images channel 0, mean = -0.0000, std = 1.2211
real images channel 1, mean = -0.0002, std = 1.2211
real images channel 2, mean = 0.0002, std = 1.3014
initialize synthetic data from random noise
[2023-10-27 23:12:02] training begins
-------------------------
Evaluation
model_train = ConvNet, model_eval = ConvNet, iteration = 0
DC augmentation parameters: 
 {'crop': 4, 'scale': 0.2, 'rotate': 45, 'noise': 0.001, 'strategy': 'none'}
[2023-10-27 23:12:10] Evaluate_00: epoch = 0300 train time = 5 s train loss = 0.003654 train acc = 1.0000, test acc = 0.0794
[2023-10-27 23:12:14] Evaluate_01: epoch = 0300 train time = 2 s train loss = 0.003733 train acc = 1.0000, test acc = 0.0789
[2023-10-27 23:12:19] Evaluate_02: epoch = 0300 train time = 2 s train loss = 0.003756 train acc = 1.0000, test acc = 0.0701
[2023-10-27 23:12:23] Evaluate_03: epoch = 0300 train time = 2 s train loss = 0.003662 train acc = 1.0000, test acc = 0.0830
[2023-10-27 23:12:28] Evaluate_04: epoch = 0300 train time = 2 s train loss = 0.003675 train acc = 1.0000, test acc = 0.0789
[2023-10-27 23:12:32] Evaluate_05: epoch = 0300 train time = 2 s train loss = 0.003707 train acc = 1.0000, test acc = 0.0757
[2023-10-27 23:12:37] Evaluate_06: epoch = 0300 train time = 2 s train loss = 0.003746 train acc = 1.0000, test acc = 0.0795
[2023-10-27 23:12:41] Evaluate_07: epoch = 0300 train time = 2 s train loss = 0.003519 train acc = 1.0000, test acc = 0.0917
[2023-10-27 23:12:46] Evaluate_08: epoch = 0300 train time = 2 s train loss = 0.003716 train acc = 1.0000, test acc = 0.0738
[2023-10-27 23:12:50] Evaluate_09: epoch = 0300 train time = 2 s train loss = 0.003703 train acc = 1.0000, test acc = 0.0656
[2023-10-27 23:12:55] Evaluate_10: epoch = 0300 train time = 2 s train loss = 0.003687 train acc = 1.0000, test acc = 0.0864
[2023-10-27 23:12:59] Evaluate_11: epoch = 0300 train time = 2 s train loss = 0.003615 train acc = 1.0000, test acc = 0.0935
[2023-10-27 23:13:04] Evaluate_12: epoch = 0300 train time = 2 s train loss = 0.003698 train acc = 1.0000, test acc = 0.0688
[2023-10-27 23:13:08] Evaluate_13: epoch = 0300 train time = 2 s train loss = 0.003807 train acc = 1.0000, test acc = 0.0830
[2023-10-27 23:13:13] Evaluate_14: epoch = 0300 train time = 2 s train loss = 0.003722 train acc = 1.0000, test acc = 0.0649
[2023-10-27 23:13:17] Evaluate_15: epoch = 0300 train time = 2 s train loss = 0.003680 train acc = 1.0000, test acc = 0.0761
[2023-10-27 23:13:21] Evaluate_16: epoch = 0300 train time = 2 s train loss = 0.003802 train acc = 1.0000, test acc = 0.0651
[2023-10-27 23:13:26] Evaluate_17: epoch = 0300 train time = 2 s train loss = 0.003667 train acc = 1.0000, test acc = 0.0728
[2023-10-27 23:13:30] Evaluate_18: epoch = 0300 train time = 2 s train loss = 0.003838 train acc = 1.0000, test acc = 0.0822
[2023-10-27 23:13:35] Evaluate_19: epoch = 0300 train time = 2 s train loss = 0.003722 train acc = 1.0000, test acc = 0.0761
Evaluate 20 random ConvNet, mean = 0.0773 std = 0.0079
-------------------------
tensor([[ 0.0076,  0.0202,  0.0330,  0.0133,  0.0047,  0.0435, -0.0195,  0.0030,
          0.0342,  0.0384]], device='cuda:0', grad_fn=<AddmmBackward0>)
Traceback (most recent call last):
  File "main.py", line 264, in <module>
    main()
  File "main.py", line 226, in main
    lda_loss = LDALoss(lda_X, lda_Y)
  File "/data/happythgus/newLDA/DC/utils.py", line 57, in LDALoss
    diff = (torch.sum(class_samples[i] - class_mean).to('cuda')).item() 
IndexError: index 1 is out of bounds for dimension 0 with size 1
