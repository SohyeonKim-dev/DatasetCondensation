/data/happythgus/LDA/DC
/data/opt/anaconda3/bin/python
moana-r3
/data/happythgus/LDA/DC/main.py:90: DeprecationWarning: an integer is required (got type numpy.float64).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
/data/happythgus/LDA/DC/main.py:90: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:245.)
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
eval_it_pool:  [0, 500, 1000]
Files already downloaded and verified
Files already downloaded and verified

================== Exp 0 ==================
 
Hyper-parameters: 
 {'method': 'DC', 'dataset': 'CIFAR10', 'model': 'ConvNet', 'ipc': 1, 'eval_mode': 'S', 'num_exp': 5, 'num_eval': 20, 'epoch_eval_train': 300, 'Iteration': 1000, 'lr_img': 0.1, 'lr_net': 0.01, 'batch_real': 256, 'batch_train': 256, 'init': 'noise', 'dsa_strategy': 'None', 'data_path': 'data', 'save_path': 'result', 'dis_metric': 'ours', 'outer_loop': 1, 'inner_loop': 1, 'device': 'cuda', 'dsa_param': <utils.ParamDiffAug object at 0x7f0f32ce8c70>, 'dsa': False}
Evaluation model pool:  ['ConvNet']
class c = 0: 5000 real images
class c = 1: 5000 real images
class c = 2: 5000 real images
class c = 3: 5000 real images
class c = 4: 5000 real images
class c = 5: 5000 real images
class c = 6: 5000 real images
class c = 7: 5000 real images
class c = 8: 5000 real images
class c = 9: 5000 real images
real images channel 0, mean = -0.0000, std = 1.2211
real images channel 1, mean = -0.0002, std = 1.2211
real images channel 2, mean = 0.0002, std = 1.3014
initialize synthetic data from random noise
[2023-10-16 14:29:41] training begins
-------------------------
Evaluation
model_train = ConvNet, model_eval = ConvNet, iteration = 0
DC augmentation parameters: 
 {'crop': 4, 'scale': 0.2, 'rotate': 45, 'noise': 0.001, 'strategy': 'none'}
[2023-10-16 14:29:45] Evaluate_00: epoch = 0300 train time = 2 s train loss = 0.000456 train acc = 1.0000, test acc = 0.1063
[2023-10-16 14:29:48] Evaluate_01: epoch = 0300 train time = 0 s train loss = 0.000427 train acc = 1.0000, test acc = 0.1144
[2023-10-16 14:29:50] Evaluate_02: epoch = 0300 train time = 0 s train loss = 0.000425 train acc = 1.0000, test acc = 0.1056
[2023-10-16 14:29:53] Evaluate_03: epoch = 0300 train time = 0 s train loss = 0.000408 train acc = 1.0000, test acc = 0.0893
[2023-10-16 14:29:56] Evaluate_04: epoch = 0300 train time = 0 s train loss = 0.000408 train acc = 1.0000, test acc = 0.1062
[2023-10-16 14:29:58] Evaluate_05: epoch = 0300 train time = 0 s train loss = 0.000437 train acc = 1.0000, test acc = 0.1048
[2023-10-16 14:30:01] Evaluate_06: epoch = 0300 train time = 0 s train loss = 0.000433 train acc = 1.0000, test acc = 0.0968
[2023-10-16 14:30:04] Evaluate_07: epoch = 0300 train time = 0 s train loss = 0.000431 train acc = 1.0000, test acc = 0.1023
[2023-10-16 14:30:06] Evaluate_08: epoch = 0300 train time = 0 s train loss = 0.000422 train acc = 1.0000, test acc = 0.1120
[2023-10-16 14:30:09] Evaluate_09: epoch = 0300 train time = 0 s train loss = 0.000416 train acc = 1.0000, test acc = 0.1262
[2023-10-16 14:30:12] Evaluate_10: epoch = 0300 train time = 0 s train loss = 0.000418 train acc = 1.0000, test acc = 0.1278
[2023-10-16 14:30:14] Evaluate_11: epoch = 0300 train time = 0 s train loss = 0.000418 train acc = 1.0000, test acc = 0.1187
[2023-10-16 14:30:17] Evaluate_12: epoch = 0300 train time = 0 s train loss = 0.000432 train acc = 1.0000, test acc = 0.1238
[2023-10-16 14:30:20] Evaluate_13: epoch = 0300 train time = 0 s train loss = 0.000446 train acc = 1.0000, test acc = 0.0999
[2023-10-16 14:30:22] Evaluate_14: epoch = 0300 train time = 0 s train loss = 0.000421 train acc = 1.0000, test acc = 0.1170
[2023-10-16 14:30:25] Evaluate_15: epoch = 0300 train time = 0 s train loss = 0.000406 train acc = 1.0000, test acc = 0.1055
[2023-10-16 14:30:28] Evaluate_16: epoch = 0300 train time = 0 s train loss = 0.000414 train acc = 1.0000, test acc = 0.0987
[2023-10-16 14:30:30] Evaluate_17: epoch = 0300 train time = 0 s train loss = 0.000416 train acc = 1.0000, test acc = 0.1036
[2023-10-16 14:30:33] Evaluate_18: epoch = 0300 train time = 0 s train loss = 0.000417 train acc = 1.0000, test acc = 0.0865
[2023-10-16 14:30:36] Evaluate_19: epoch = 0300 train time = 0 s train loss = 0.000396 train acc = 1.0000, test acc = 0.1116
Evaluate 20 random ConvNet, mean = 0.1079 std = 0.0110
-------------------------
tensor([2.5178e-05, 1.1098e-04, 1.4638e-04, 2.5772e-04, 8.4755e-05, 1.1487e-04,
        3.8915e-05, 1.2283e-04, 3.8386e-05, 9.0206e-05], device='cuda:0',
       grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([-0.0042,  0.0317, -0.0228,  0.0004,  0.0073, -0.0182, -0.0319, -0.0134,
        -0.0034,  0.0014], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0',
       grad_fn=<DivBackward0>)
Traceback (most recent call last):
  File "/data/happythgus/LDA/DC/main.py", line 263, in <module>
    main()
  File "/data/happythgus/LDA/DC/main.py", line 230, in main
    loss.backward()
  File "/home/happythgus/.local/lib/python3.9/site-packages/torch/_tensor.py", line 487, in backward
    torch.autograd.backward(
  File "/home/happythgus/.local/lib/python3.9/site-packages/torch/autograd/__init__.py", line 193, in backward
    grad_tensors_ = _make_grads(tensors, grad_tensors_, is_grads_batched=False)
  File "/home/happythgus/.local/lib/python3.9/site-packages/torch/autograd/__init__.py", line 88, in _make_grads
    raise RuntimeError("grad can be implicitly created only for scalar outputs")
RuntimeError: grad can be implicitly created only for scalar outputs
