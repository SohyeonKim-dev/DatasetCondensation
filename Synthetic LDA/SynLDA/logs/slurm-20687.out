/data/happythgus/LDA/DC
/data/opt/anaconda3/bin/python
moana-r3
/data/happythgus/LDA/DC/main.py:90: DeprecationWarning: an integer is required (got type numpy.float64).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
/data/happythgus/LDA/DC/main.py:90: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:245.)
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
eval_it_pool:  [0, 500, 1000]

================== Exp 0 ==================
 
Hyper-parameters: 
 {'method': 'DC', 'dataset': 'MNIST', 'model': 'ConvNet', 'ipc': 1, 'eval_mode': 'S', 'num_exp': 5, 'num_eval': 20, 'epoch_eval_train': 300, 'Iteration': 1000, 'lr_img': 0.1, 'lr_net': 0.01, 'batch_real': 256, 'batch_train': 256, 'init': 'noise', 'dsa_strategy': 'None', 'data_path': 'data', 'save_path': 'result', 'dis_metric': 'ours', 'outer_loop': 1, 'inner_loop': 1, 'device': 'cuda', 'dsa_param': <utils.ParamDiffAug object at 0x7fe957103250>, 'dsa': False}
Evaluation model pool:  ['ConvNet']
class c = 0: 5923 real images
class c = 1: 6742 real images
class c = 2: 5958 real images
class c = 3: 6131 real images
class c = 4: 5842 real images
class c = 5: 5421 real images
class c = 6: 5918 real images
class c = 7: 6265 real images
class c = 8: 5851 real images
class c = 9: 5949 real images
real images channel 0, mean = -0.0001, std = 1.0000
initialize synthetic data from random noise
[2023-10-16 00:12:36] training begins
-------------------------
Evaluation
model_train = ConvNet, model_eval = ConvNet, iteration = 0
DC augmentation parameters: 
 {'crop': 4, 'scale': 0.2, 'rotate': 45, 'noise': 0.001, 'strategy': 'crop_scale_rotate'}
batchnorm
[2023-10-16 00:12:44] Evaluate_00: epoch = 1000 train time = 5 s train loss = 0.000329 train acc = 1.0000, test acc = 0.1099
batchnorm
[2023-10-16 00:12:50] Evaluate_01: epoch = 1000 train time = 4 s train loss = 0.002178 train acc = 1.0000, test acc = 0.0927
batchnorm
[2023-10-16 00:12:56] Evaluate_02: epoch = 1000 train time = 4 s train loss = 0.002013 train acc = 1.0000, test acc = 0.0992
batchnorm
[2023-10-16 00:13:02] Evaluate_03: epoch = 1000 train time = 4 s train loss = 0.000813 train acc = 1.0000, test acc = 0.0985
batchnorm
[2023-10-16 00:13:08] Evaluate_04: epoch = 1000 train time = 4 s train loss = 0.001061 train acc = 1.0000, test acc = 0.0986
batchnorm
[2023-10-16 00:13:14] Evaluate_05: epoch = 1000 train time = 4 s train loss = 0.000459 train acc = 1.0000, test acc = 0.0903
batchnorm
[2023-10-16 00:13:20] Evaluate_06: epoch = 1000 train time = 4 s train loss = 0.001322 train acc = 1.0000, test acc = 0.1299
batchnorm
[2023-10-16 00:13:26] Evaluate_07: epoch = 1000 train time = 4 s train loss = 0.000436 train acc = 1.0000, test acc = 0.1142
batchnorm
[2023-10-16 00:13:32] Evaluate_08: epoch = 1000 train time = 4 s train loss = 0.005647 train acc = 1.0000, test acc = 0.1221
batchnorm
[2023-10-16 00:13:37] Evaluate_09: epoch = 1000 train time = 4 s train loss = 0.001915 train acc = 1.0000, test acc = 0.0809
batchnorm
[2023-10-16 00:13:43] Evaluate_10: epoch = 1000 train time = 4 s train loss = 0.001469 train acc = 1.0000, test acc = 0.0564
batchnorm
[2023-10-16 00:13:49] Evaluate_11: epoch = 1000 train time = 4 s train loss = 0.003801 train acc = 1.0000, test acc = 0.0992
batchnorm
[2023-10-16 00:13:54] Evaluate_12: epoch = 1000 train time = 4 s train loss = 0.000143 train acc = 1.0000, test acc = 0.0894
batchnorm
[2023-10-16 00:14:00] Evaluate_13: epoch = 1000 train time = 4 s train loss = 0.001267 train acc = 1.0000, test acc = 0.1083
batchnorm
[2023-10-16 00:14:06] Evaluate_14: epoch = 1000 train time = 4 s train loss = 0.000459 train acc = 1.0000, test acc = 0.0983
batchnorm
[2023-10-16 00:14:12] Evaluate_15: epoch = 1000 train time = 4 s train loss = 0.002040 train acc = 1.0000, test acc = 0.0710
batchnorm
[2023-10-16 00:14:18] Evaluate_16: epoch = 1000 train time = 4 s train loss = 0.001270 train acc = 1.0000, test acc = 0.0915
batchnorm
[2023-10-16 00:14:24] Evaluate_17: epoch = 1000 train time = 4 s train loss = 0.000445 train acc = 1.0000, test acc = 0.0923
batchnorm
[2023-10-16 00:14:30] Evaluate_18: epoch = 1000 train time = 4 s train loss = 0.002308 train acc = 1.0000, test acc = 0.1141
batchnorm
[2023-10-16 00:14:36] Evaluate_19: epoch = 1000 train time = 4 s train loss = 0.000899 train acc = 1.0000, test acc = 0.0785
Evaluate 20 random ConvNet, mean = 0.0968 std = 0.0169
-------------------------
batchnorm
Traceback (most recent call last):
  File "/data/happythgus/LDA/DC/main.py", line 291, in <module>
    main()
  File "/data/happythgus/LDA/DC/main.py", line 250, in main
    lda_loss = LDALoss(lda_X, lda_Y).cuda()
  File "/data/happythgus/LDA/DC/utils.py", line 41, in LDALoss
    withinClassVar += torch.sum(diff * diff, dim=0).cuda()
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!
