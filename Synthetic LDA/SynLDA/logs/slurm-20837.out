/data/happythgus/LDA/DC
/data/opt/anaconda3/bin/python
moana-r3
/data/happythgus/LDA/DC/main.py:90: DeprecationWarning: an integer is required (got type numpy.float64).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
/data/happythgus/LDA/DC/main.py:90: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:245.)
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
eval_it_pool:  [0, 500, 1000]
Files already downloaded and verified
Files already downloaded and verified

================== Exp 0 ==================
 
Hyper-parameters: 
 {'method': 'DC', 'dataset': 'CIFAR10', 'model': 'ConvNet', 'ipc': 1, 'eval_mode': 'S', 'num_exp': 5, 'num_eval': 20, 'epoch_eval_train': 300, 'Iteration': 1000, 'lr_img': 0.1, 'lr_net': 0.01, 'batch_real': 256, 'batch_train': 256, 'init': 'noise', 'dsa_strategy': 'None', 'data_path': 'data', 'save_path': 'result', 'dis_metric': 'ours', 'outer_loop': 1, 'inner_loop': 1, 'device': 'cuda', 'dsa_param': <utils.ParamDiffAug object at 0x7f198d186b20>, 'dsa': False}
Evaluation model pool:  ['ConvNet']
class c = 0: 5000 real images
class c = 1: 5000 real images
class c = 2: 5000 real images
class c = 3: 5000 real images
class c = 4: 5000 real images
class c = 5: 5000 real images
class c = 6: 5000 real images
class c = 7: 5000 real images
class c = 8: 5000 real images
class c = 9: 5000 real images
real images channel 0, mean = -0.0000, std = 1.2211
real images channel 1, mean = -0.0002, std = 1.2211
real images channel 2, mean = 0.0002, std = 1.3014
initialize synthetic data from random noise
[2023-10-16 14:31:43] training begins
-------------------------
Evaluation
model_train = ConvNet, model_eval = ConvNet, iteration = 0
DC augmentation parameters: 
 {'crop': 4, 'scale': 0.2, 'rotate': 45, 'noise': 0.001, 'strategy': 'none'}
[2023-10-16 14:31:46] Evaluate_00: epoch = 0300 train time = 1 s train loss = 0.000416 train acc = 1.0000, test acc = 0.1090
[2023-10-16 14:31:49] Evaluate_01: epoch = 0300 train time = 0 s train loss = 0.000399 train acc = 1.0000, test acc = 0.1077
[2023-10-16 14:31:51] Evaluate_02: epoch = 0300 train time = 0 s train loss = 0.000421 train acc = 1.0000, test acc = 0.1011
[2023-10-16 14:31:54] Evaluate_03: epoch = 0300 train time = 0 s train loss = 0.000406 train acc = 1.0000, test acc = 0.1187
[2023-10-16 14:31:56] Evaluate_04: epoch = 0300 train time = 0 s train loss = 0.000415 train acc = 1.0000, test acc = 0.1034
[2023-10-16 14:31:59] Evaluate_05: epoch = 0300 train time = 0 s train loss = 0.000413 train acc = 1.0000, test acc = 0.0901
[2023-10-16 14:32:01] Evaluate_06: epoch = 0300 train time = 0 s train loss = 0.000416 train acc = 1.0000, test acc = 0.0951
[2023-10-16 14:32:04] Evaluate_07: epoch = 0300 train time = 0 s train loss = 0.000379 train acc = 1.0000, test acc = 0.1118
[2023-10-16 14:32:06] Evaluate_08: epoch = 0300 train time = 0 s train loss = 0.000432 train acc = 1.0000, test acc = 0.1006
[2023-10-16 14:32:09] Evaluate_09: epoch = 0300 train time = 0 s train loss = 0.000407 train acc = 1.0000, test acc = 0.1318
[2023-10-16 14:32:11] Evaluate_10: epoch = 0300 train time = 0 s train loss = 0.000404 train acc = 1.0000, test acc = 0.1076
[2023-10-16 14:32:14] Evaluate_11: epoch = 0300 train time = 0 s train loss = 0.000420 train acc = 1.0000, test acc = 0.1133
[2023-10-16 14:32:17] Evaluate_12: epoch = 0300 train time = 0 s train loss = 0.000419 train acc = 1.0000, test acc = 0.1046
[2023-10-16 14:32:19] Evaluate_13: epoch = 0300 train time = 0 s train loss = 0.000402 train acc = 1.0000, test acc = 0.1073
[2023-10-16 14:32:22] Evaluate_14: epoch = 0300 train time = 0 s train loss = 0.000409 train acc = 1.0000, test acc = 0.1010
[2023-10-16 14:32:24] Evaluate_15: epoch = 0300 train time = 0 s train loss = 0.000412 train acc = 1.0000, test acc = 0.0862
[2023-10-16 14:32:27] Evaluate_16: epoch = 0300 train time = 0 s train loss = 0.000414 train acc = 1.0000, test acc = 0.0925
[2023-10-16 14:32:30] Evaluate_17: epoch = 0300 train time = 0 s train loss = 0.000406 train acc = 1.0000, test acc = 0.1074
[2023-10-16 14:32:32] Evaluate_18: epoch = 0300 train time = 0 s train loss = 0.000412 train acc = 1.0000, test acc = 0.1091
[2023-10-16 14:32:35] Evaluate_19: epoch = 0300 train time = 0 s train loss = 0.000418 train acc = 1.0000, test acc = 0.1148
Evaluate 20 random ConvNet, mean = 0.1057 std = 0.0101
-------------------------
tensor([4.0962e-05, 2.2429e-04, 5.3013e-05, 1.0982e-04, 1.0074e-04, 1.1776e-04,
        1.5086e-04, 1.1151e-04, 8.8399e-05, 8.9234e-05], device='cuda:0',
       grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([ 0.0011,  0.0229,  0.0032,  0.0167, -0.0080, -0.0274, -0.0265,  0.0005,
         0.0117, -0.0213], device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([10])
tensor(0., device='cuda:0', grad_fn=<SqueezeBackward0>)
torch.Size([])
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0',
       grad_fn=<DivBackward0>)
Traceback (most recent call last):
  File "/data/happythgus/LDA/DC/main.py", line 263, in <module>
    main()
  File "/data/happythgus/LDA/DC/main.py", line 230, in main
    loss.backward()
  File "/home/happythgus/.local/lib/python3.9/site-packages/torch/_tensor.py", line 487, in backward
    torch.autograd.backward(
  File "/home/happythgus/.local/lib/python3.9/site-packages/torch/autograd/__init__.py", line 193, in backward
    grad_tensors_ = _make_grads(tensors, grad_tensors_, is_grads_batched=False)
  File "/home/happythgus/.local/lib/python3.9/site-packages/torch/autograd/__init__.py", line 88, in _make_grads
    raise RuntimeError("grad can be implicitly created only for scalar outputs")
RuntimeError: grad can be implicitly created only for scalar outputs
