/data/happythgus/newLDA/DC
/data/opt/anaconda3/envs/pytorch1.12.1_p38/bin/python
moana-r3
main.py:95: DeprecationWarning: an integer is required (got type numpy.float64).  Implicit conversion to integers using __int__ is deprecated, and may be removed in a future version of Python.
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
main.py:95: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at  /opt/conda/conda-bld/pytorch_1659484810403/work/torch/csrc/utils/tensor_new.cpp:201.)
  label_syn = torch.tensor([np.ones(args.ipc)*i for i in range(num_classes)], dtype=torch.long, requires_grad=False, device=args.device).view(-1) # [0,0,0, 1,1,1, ..., 9,9,9]
eval_it_pool:  [0, 500, 1000]
Files already downloaded and verified
Files already downloaded and verified

================== Exp 0 ==================
 
Hyper-parameters: 
 {'method': 'DC', 'dataset': 'CIFAR10', 'model': 'ConvNet', 'ipc': 10, 'eval_mode': 'S', 'num_exp': 1, 'num_eval': 20, 'epoch_eval_train': 300, 'Iteration': 1000, 'lr_img': 0.1, 'lr_net': 0.01, 'batch_real': 256, 'batch_train': 256, 'init': 'noise', 'dsa_strategy': 'None', 'data_path': 'data', 'save_path': 'result', 'dis_metric': 'ours', 'outer_loop': 10, 'inner_loop': 50, 'device': 'cuda', 'dsa_param': <utils.ParamDiffAug object at 0x7f434a259cd0>, 'dsa': False}
Evaluation model pool:  ['ConvNet']
class c = 0: 5000 real images
class c = 1: 5000 real images
class c = 2: 5000 real images
class c = 3: 5000 real images
class c = 4: 5000 real images
class c = 5: 5000 real images
class c = 6: 5000 real images
class c = 7: 5000 real images
class c = 8: 5000 real images
class c = 9: 5000 real images
real images channel 0, mean = -0.0000, std = 1.2211
real images channel 1, mean = -0.0002, std = 1.2211
real images channel 2, mean = 0.0002, std = 1.3014
initialize synthetic data from random noise
[2023-10-27 23:43:28] training begins
-------------------------
Evaluation
model_train = ConvNet, model_eval = ConvNet, iteration = 0
DC augmentation parameters: 
 {'crop': 4, 'scale': 0.2, 'rotate': 45, 'noise': 0.001, 'strategy': 'none'}
[2023-10-27 23:43:36] Evaluate_00: epoch = 0300 train time = 5 s train loss = 0.003651 train acc = 1.0000, test acc = 0.0875
[2023-10-27 23:43:40] Evaluate_01: epoch = 0300 train time = 2 s train loss = 0.003710 train acc = 1.0000, test acc = 0.1290
[2023-10-27 23:43:45] Evaluate_02: epoch = 0300 train time = 2 s train loss = 0.003653 train acc = 1.0000, test acc = 0.0959
[2023-10-27 23:43:49] Evaluate_03: epoch = 0300 train time = 2 s train loss = 0.003719 train acc = 1.0000, test acc = 0.1175
[2023-10-27 23:43:54] Evaluate_04: epoch = 0300 train time = 2 s train loss = 0.003723 train acc = 1.0000, test acc = 0.0907
[2023-10-27 23:43:58] Evaluate_05: epoch = 0300 train time = 2 s train loss = 0.003705 train acc = 1.0000, test acc = 0.0863
[2023-10-27 23:44:03] Evaluate_06: epoch = 0300 train time = 2 s train loss = 0.003681 train acc = 1.0000, test acc = 0.0951
[2023-10-27 23:44:07] Evaluate_07: epoch = 0300 train time = 2 s train loss = 0.003763 train acc = 1.0000, test acc = 0.1285
[2023-10-27 23:44:12] Evaluate_08: epoch = 0300 train time = 2 s train loss = 0.003590 train acc = 1.0000, test acc = 0.1067
[2023-10-27 23:44:16] Evaluate_09: epoch = 0300 train time = 2 s train loss = 0.003655 train acc = 1.0000, test acc = 0.1015
[2023-10-27 23:44:21] Evaluate_10: epoch = 0300 train time = 2 s train loss = 0.003691 train acc = 1.0000, test acc = 0.0986
[2023-10-27 23:44:25] Evaluate_11: epoch = 0300 train time = 2 s train loss = 0.003684 train acc = 1.0000, test acc = 0.0994
[2023-10-27 23:44:29] Evaluate_12: epoch = 0300 train time = 2 s train loss = 0.003707 train acc = 1.0000, test acc = 0.0985
[2023-10-27 23:44:34] Evaluate_13: epoch = 0300 train time = 2 s train loss = 0.003752 train acc = 1.0000, test acc = 0.1035
[2023-10-27 23:44:38] Evaluate_14: epoch = 0300 train time = 2 s train loss = 0.003665 train acc = 1.0000, test acc = 0.0904
[2023-10-27 23:44:43] Evaluate_15: epoch = 0300 train time = 2 s train loss = 0.003637 train acc = 1.0000, test acc = 0.1220
[2023-10-27 23:44:47] Evaluate_16: epoch = 0300 train time = 2 s train loss = 0.003677 train acc = 1.0000, test acc = 0.1001
[2023-10-27 23:44:52] Evaluate_17: epoch = 0300 train time = 2 s train loss = 0.003645 train acc = 1.0000, test acc = 0.0977
[2023-10-27 23:44:56] Evaluate_18: epoch = 0300 train time = 2 s train loss = 0.003596 train acc = 1.0000, test acc = 0.1163
[2023-10-27 23:45:01] Evaluate_19: epoch = 0300 train time = 2 s train loss = 0.003639 train acc = 1.0000, test acc = 0.1172
Evaluate 20 random ConvNet, mean = 0.1041 std = 0.0128
-------------------------
[tensor([[-0.0316, -0.0176, -0.0205, -0.0074,  0.0273,  0.0082, -0.0065,  0.0215,
          0.0049, -0.0074]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0217, -0.0186, -0.0247, -0.0114,  0.0202,  0.0118, -0.0066,  0.0287,
          0.0071, -0.0061]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0253, -0.0157, -0.0274, -0.0070,  0.0250,  0.0087, -0.0157,  0.0264,
          0.0069, -0.0064]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0277, -0.0137, -0.0252, -0.0106,  0.0258,  0.0106, -0.0067,  0.0193,
          0.0027, -0.0060]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0304, -0.0161, -0.0256, -0.0098,  0.0258,  0.0078, -0.0071,  0.0293,
          0.0066,  0.0007]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0272, -0.0156, -0.0178, -0.0120,  0.0217,  0.0081, -0.0056,  0.0334,
          0.0144, -0.0026]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0313, -0.0097, -0.0217, -0.0132,  0.0196,  0.0101, -0.0146,  0.0223,
          0.0058,  0.0012]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0312, -0.0112, -0.0208, -0.0112,  0.0218,  0.0129, -0.0076,  0.0250,
          0.0044, -0.0027]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0319, -0.0120, -0.0186, -0.0119,  0.0279,  0.0117, -0.0115,  0.0254,
          0.0057, -0.0035]], device='cuda:0', grad_fn=<AddmmBackward0>), tensor([[-0.0253, -0.0166, -0.0234, -0.0074,  0.0211,  0.0083, -0.0076,  0.0276,
         -0.0040, -0.0056]], device='cuda:0', grad_fn=<AddmmBackward0>)]
10
Traceback (most recent call last):
  File "main.py", line 264, in <module>
    main()
  File "main.py", line 226, in main
    lda_loss = LDALoss(lda_X, lda_Y)
  File "/data/happythgus/newLDA/DC/utils.py", line 70, in LDALoss
    class_mean = torch.mean(torch.mean(torch.tensor(class_samples).to('cuda')).to('cuda')).to('cuda').item() 
ValueError: only one element tensors can be converted to Python scalars
